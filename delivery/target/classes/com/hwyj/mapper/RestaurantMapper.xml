<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">  
  
<mapper namespace="com.hwyj.mapper.RestaurantMapper">

	<resultMap type="com.hwyj.domain.ResVO" id="resmap">
	<result property="RES_CODE" column="RES_CODE" />
	<result property="RES_NAME"  column="RES_NAME"/>
	<result property="RES_INFO" column="RES_INFO" />
	<result property="DEL_PRICE" column="DEL_PRICE" />
	<result property="RES_MENU_PRICE" column="RES_MENU_PRICE" />
		</resultMap>
		
	<resultMap type="com.hwyj.domain.ResMenuVO" id="menuMap">
	<result property="RES_CODE" column="RES_CODE" />
	<result property="res_menu_code"  column="res_menu_code"/>
	<result property="res_menu_name" column="res_menu_name" />
	<result property="res_menu_explan" column="res_menu_explan" />
	<result property="res_menu_price" column="res_menu_price" />
	
	</resultMap>
	
	
	
	
	
	<!-- <select id="ResInfo" resultType="AllMap" >
		SELECT *
		FROM res
		right JOIN auth ON res.res_code = auth.auth
		left join member on member.id = auth.id
		WHERE res.res_code is null AND
		(auth.auth="RES_ROLE" IS not NULL OR res.res_code)
	</select> -->
	
	
		
<!--  메뉴보기 (식당이름, 메뉴이름, 메뉴설명, 메뉴가격) -->
	<select id="menuList"   parameterType="map" resultType="com.hwyj.domain.ResMenuVO">	
	<!--   SELECT res_menu.res_code,
 			   res_menu.res_menu_code,
			   res_menu.res_menu_name,
               res_menu.res_menu_explan,
               res_menu.res_menu_price
		FROM testdb.res_menu
		left JOIN res ON res_menu.res_menu_code = res.res_code
		WHERE res_menu.res_code is not null AND
		(res.res_code IS  NULL)  -->
		 SELECT res_menu.res_code,
 			   res_menu.res_menu_code,
			   res_menu.res_menu_name,
               res_menu.res_menu_explan,
               res_menu.res_menu_price
		FROM testdb.res_menu
		right JOIN res ON res_menu.res_code = res.res_code
		WHERE res_menu.res_code=#{res_code}
	</select>
	<update id="rescode" parameterType="String">
	update testdb.member set res_code=#{res_code} where id=#{id}
	</update>
	
	<select id="mainmenuList" parameterType="String" resultType="com.hwyj.domain.ResMenuVO">
	select res_code,res_menu_name,res_menu_price from testdb.res_menu where res_menu_code > 0 and res_code >0
	</select>
	
	
	<!-- 매장 리스트 -->
		<select id="restList" parameterType="String" resultType="com.hwyj.domain.ResVO">
		 SELECT 
        res.res_code,
        res.res_name,
        res.res_info,
        res.del_price
		FROM res
		left JOIN res_menu ON res.res_code = res_menu.res_code
		WHERE res.res_code is not null AND
		(res_menu.res_code IS not NULL)
		group by res.res_name,res_menu.res_code
		
		</select>
		
		<select id="restList2" parameterType="String" resultType="com.hwyj.domain.ResVO">
		SELECT 
        res.res_code,
        res.res_name,
        res.res_info,
        res.del_price
        
		FROM res
		right JOIN res_menu ON res.res_code = res_menu.res_code
        right JOIN review ON res.res_code = review.res_code
		WHERE res.res_code is not null AND
		(res_menu.res_code IS not NULL)
		group by res.res_name,res_menu.res_code order by count(review.res_code) desc
		</select>
	
 	<select id="read" resultType="com.hwyj.domain.ResMenuVO">
 	select res_menu.res_code,res_menu_code,res_menu_name,res_menu_price,res_menu_explan
	from res_menu 
	right outer join res on res.res_code=res_menu.res_code 
	where res_menu_code=#{res_menu_code}
	</select>
	 
	 
	 <select id="ResInfo" resultType="com.hwyj.domain.ResVO">
 	select * from res where res_code=#{res_code}
	</select>
	 
	
	<select id="menuread" parameterType="map" resultType="com.hwyj.domain.ResMenuVO">	
		    select  res_code ,
		 	        res_menu_code,
			 	    res_menu_name,
               		res_menu_explan,
              		res_menu_price
			from res_menu where res_code=#{res_code}
	</select>
	
		<select id="getList" resultType="com.hwyj.domain.ResMenuVO">	
	<!-- select res_menu_name, res_menu_explan, res_menu_price from res_menu left outer join member on res_menu.res_code=member.res_code
	where res_menu.res_code=#{res_code} -->
		select res_menu_name,res_menu_price from testdb.res_menu where res_menu_code=#{res_menu_code}
	</select>
	
		
		<select id="getorderList">
		select 
		cart_no,
		c.id,
		menu1.res_menu_code,
		menu1.res_menu_price*c.amount as sum,
		menu1.res_code,
        menu1.res_menu_name,
     
		member.m_name,
		member.address,
		member.tel
		from testdb.cart as c

		left outer join testdb.res_menu as menu1 on
		c.res_menu_code=menu1.res_menu_code

		left outer join testdb.member on
		c.id=testdb.member.id
        
		where c.id=#{id} and payment='Y'
	</select>
		
	
	<!-- 이미지저장 테스트 -->
	<insert id="saveImage" parameterType="java.util.Map">
		INSERT INTO testdb.img_table VALUES #({img})
	</insert>

	<!-- 메장등록 -->
	<insert id="insertres" parameterType="com.hwyj.domain.ResVO">
		INSERT INTO testdb.res
		(RES_CODE,RES_NAME,RES_INFO,DEL_PRICE)
		VALUES 
		(#{RES_CODE},
		#{RES_NAME},
		#{RES_INFO},
		#{DEL_PRICE})
		
	</insert>
	
		<!-- 수정 -->
	<update id="UpdateRes" parameterType="com.hwyj.domain.ResVO">
	UPDATE testdb.res
	SET 
	RES_NAME=#{RES_NAME},
	RES_INFO=#{RES_INFO},
	DEL_PRICE=#{DEL_PRICE}
	WHERE 
	(RES_CODE=#{RES_CODE})
	</update>
	
	<!-- 삭제 -->
	<delete id="deleteRes" parameterType="com.hwyj.domain.ResVO">
		delete from testdb.res where RES_CODE=#{RES_CODE}
	</delete>
	
	
		<!-- 메뉴 등록 -->
	<insert id="insertmenu" parameterType="com.hwyj.domain.ResMenuVO">
		INSERT INTO testdb.res_menu
		(RES_CODE,
		res_menu_code,
		res_menu_name,
		res_menu_explan,
		res_menu_price)
		VALUES 
		(#{RES_CODE},
		#{res_menu_code},
		#{res_menu_name},
		#{res_menu_explan},
		#{res_menu_price}) 
	</insert>
	
			<!-- 수정 -->
	<update id="UpdateMenu" parameterType="com.hwyj.domain.ResMenuVO">
	UPDATE testdb.res_menu
	SET 
	res_menu_name=#{res_menu_name},
	res_menu_explan=#{res_menu_explan},
	res_menu_price=#{res_menu_price}
	WHERE 
	(res_menu_code=#{res_menu_code})
	</update>
	
	<!-- 삭제 -->
	<delete id="deleteMenu" parameterType="com.hwyj.domain.ResMenuVO">
		DELETE FROM testdb.res_menu WHERE (res_menu_code=#{res_menu_code})
	</delete>
	

	
	

</mapper>